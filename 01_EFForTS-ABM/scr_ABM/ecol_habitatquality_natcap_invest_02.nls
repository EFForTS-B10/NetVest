
;insert chooser: natcap_invest_habitatquality_objective with options "landcover" and "landmanagement"
to natcap_invest_habitatquality_init
; input is located in model folder ./natcap_invest/input: input for invest is: sensitivitytable.txt, impacttable.txt, LULCmap.asc, impactmaps.asc"
; output will be written to model folder ./natcap_invest/output: output of EFForTS-ABM as inpt for Invest is: sensitivitytable.csv, impacttable.csv, LULCmap.tif, impacttables.tif"
; for testing purposes workdir can be set via full path to point to the testing data files

  let workdir "./natcap_invest"
  natcap_invest_set_up_invest
  natcap_invest_write_tables workdir
end

;; Setup the connection to python and import a few libraries
to natcap_invest_set_up_invest
  print["setting up python invest"]
  py:setup py:python3
  py:run "import sys"
  py:run "import os"
  py:run "import natcap.invest"
  py:run "from natcap.invest import habitat_quality"
  py:run "from osgeo import gdal, osr"
end



;; Generation of csv-tables
to natcap_invest_write_tables [workdir]
  print ["start write-tables"]
  natcap_invest_write_sensitivity workdir
  natcap_invest_write_impact workdir
end

;; Read in sensitivity-table (depending on research objective) from input-folder and generate sensitivity-table
to natcap_invest_write_sensitivity [workdir]
  print ["write sensitivity-table"]
  print (word "workdir:" workdir)
  ;; Reset global sensitivity-list
  let sensitivity_all []
  let filename  0
  ;; Read sensitivity file depending on habitat quality objective
  if (natcap_invest_habitatquality_objective = "landuse")
    [
     set filename word workdir "/input/sensitivitytable.txt"
     print (word "sensitivity filename:" filename)
    ]
   if (natcap_invest_habitatquality_objective = "management")
    [ ;  set filename "input/habitatquality/sensitivitytable_genbiodiv_binary_spatial.txt"
;          biodiv_invest_objective = "modelorg_plants"  [print "Warning: Biodiversity of modelorganism not yet implemented"]
;          biodiv_invest_objective = "all_plants"       [print "Warning: Biodiversity of all plants not yet implemented"])
    ]
  ifelse filename = 0 [stop]
  [
  file-open filename
    print ["file open"]
  while [not file-at-end?]
  [

    ;;Read data for previous defined research objective and correlated habitat-suitability
    let LULC file-read
    print LULC
    let NAME file-read
    let HABITAT file-read
;    let L_village file-read
    let L_r file-read
    let L_o file-read
;    let L_tinput_r file-read
;    let L_tinput_o file-read
;    let L_labor_r file-read
;    let L_labor_o file-read

    ;; Generate temporary sensitivity-list
;    let sensitivity (list LULC NAME HABITAT L_village L_lc_r L_lc_o L_tinput_r L_tinput_o L_labor_r L_labor_o)
    let sensitivity (list LULC NAME HABITAT L_r L_o )
    set sensitivity_all lput sensitivity sensitivity_all


  ]
    ;; Store sensitivity_table.csv to output folder
    let filename_out (word workdir "/output/sensitivity_table.csv")
    csv:to-file filename_out sensitivity_all

  file-close
  ]

end


;; Read in impact-table from input-folder and generate impact-table and extract greatest maximum distance over all impacts
;; requires output/impact_table.csv als referenz
to natcap_invest_write_impact [workdir]
  print ["write impact-table"]
;   set impact_all []
  let impact_all []
;  set impact_max 0
    let impact_max 0
  let filename word workdir "/input/impacttable.txt"
  print (word "impact filename:" filename)
  ifelse filename = 0 [stop]
  [
  file-open filename

  while [not file-at-end?]
  [
    ;;Read data for impact-table
    let THREAT file-read
    let MAX_DIST file-read
    let WEIGHT file-read
    let DECAY file-read
    let CUR_PATH file-read

    ;; Generate temporary impact-list
    let impact (list THREAT MAX_DIST WEIGHT DECAY CUR_PATH)

    set impact_all lput impact impact_all

    ;set impact_max impact_max + max [MAX_DIST] of impact
    ;show impact_max
  ]
    ;; Store impact_table.csv to output folder
    let filename_out word workdir "/output/impact_table.csv"
    csv:to-file filename_out impact_all

  file-close
  ]

  ;; Extract greatest distance over all impacts for buffer zone
  print ["extract greatest distance"]
  let i 1
  while [i < length impact_all]
  [
   if item 1 item i impact_all > impact_max
    [
      set impact_max item 1 item i impact_all
    ]
   set i i + 1
  ]


  show impact_max



end


to natcap_invest_habitatquality_update
  let workdir "./natcap_invest"  ; could be replaced by global variable
  let invest_wd word workdir "/output"
  let experiment natcap_invest_experiment
   natcap_invest_translate_lulc
   natcap_invest_write_maps workdir
   natcap_invest_convert_maps_tif workdir
   natcap_invest_execute_invest invest_wd experiment
   natcap_invest_convert_maps_asc workdir experiment
   natcap_invest_save_habitatquality_to_patch workdir experiment
   natcap_invest_aggregate_habitatquality
end


;; Create new variable for lulc-classification as p_landuse is still used
to natcap_invest_translate_lulc
  print["translating map"]
  ask patches
  [
    if (p_landuse = -100 and p_homebase = -1) 	[set p_landuse_invest 4] ;forest
    if (p_landuse = 1) 							[set p_landuse_invest 3] ;rubber
    if (p_landuse = 0) 							[set p_landuse_invest 2] ;oilplam
    if (p_landuse = -100 and p_homebase >= 0) 	[set p_landuse_invest 1] ;village
  ]
end

;; create new patch-variable for threat-location on the map
;to p_impact-values
;  print ["generating p_impact-values"]
;  ;let p_impact-value 0
;  ask patches
;  [
;    if (p_landuse_invest = 1) [set p_impact-value 1] ; village
;    if (p_landuse_invest = 3 and p_age = 0 and p_invest > 0 ) [set p_impact-value 2] ; lc_r: land clearing rubber: investment costs occur only during immature phase. How extracting first year of investmentcost as this is the year after land clearing?
;    if (p_landuse_invest = 2 and p_age = 0 and p_invest > 0) [set p_impact-value 3] ; lc_o: land clearing oilpalmt
;    if (p_landuse_invest = 3 and p_tinput > 0) [set p_impact-value 4] ; tinput_r: technical input rubber
;    if (p_landuse_invest = 2 and p_tinput > 0) [set p_impact-value 5] ; tinput_o: technical input oilpalm
;    if (p_landuse_invest = 3 and p_labor > 0) [set p_impact-value 6] ; labor_r: labor input rubber
;    if (p_landuse_invest = 2 and p_labor > 0) [set p_impact-value 7] ; labor_o: labor input oilpalm
;  ]
;end


;; Generation of LULC-raster-map and impact-maps (as much as impacts we have)
; if habitat quality objective landuse is set, only the landcover oilpalm and rubber plantation have impact on habitat quality of habitat types
; if habitat quality objective management is set, management of plantations have impact on habitat quality of habitat types
; also add villages and roads as settlement objective (how to make impact maps of roads? As currently they are polygons)
to natcap_invest_write_maps [workdir]
  print["writing maps to output folder"]
  natcap_invest_write_lulc_map workdir
  if (natcap_invest_habitatquality_objective = "landcover") ;
   [
  natcap_invest_write_impact_map workdir "oilpalm"
  natcap_invest_write_impact_map workdir "rubber"
   ]
  if (natcap_invest_habitatquality_objective = "management")
   [
    print "Warning: habitatquality objective management not yet implemented"
    ;natcap_invest_write_impact_map workdir "lc_o"
    ;natcap_invest_write_impact_map workdir "lc_r"
    ;natcap_invest_write_impact_map workdir "tinput_r"
    ;natcap_invest_write_impact_map workdir "tinput_o"
    ;natcap_invest_write_impact_map workdir "labor_r"
    ;natcap_invest_write_impact_map workdir "labor_o"
   ]
  ;natcap_invest_write_impact_map workdir "village"
end


;; Generation of LULC-map
to natcap_invest_write_lulc_map [workdir]
  print ["write lulc map"]
  let new-raster gis:patch-dataset p_landuse_invest
  let filename (word workdir "/output/lulc.asc")
  print filename
  if (file-exists? filename) [file-delete filename]
  gis:store-dataset new-raster filename
end

;; Generation of impact-maps
to natcap_invest_write_impact_map [workdir impact-name]
  ask patches
  [set p_impact-location FALSE]
  print["writing impact map"]
  ;; iterate throug all possible impacts
  show impact-name
  (ifelse

    ; habitat quality objective landuse:
    impact-name = "oilpalm"
    [ask patches with [p_landuse_invest = 2] [set p_impact-location TRUE] ;landclearing oilpalm: p_landuse_invest = 3 and p_age = 0 and p_invest > 0]
       print ["creating oilpalm impact map"]]
    impact-name = "rubber"
      [ask patches with [p_landuse_invest = 3 ] [set p_impact-location TRUE] ;and p_age = 0 and p_invest > 0
       print ["creating rubber impact map"]]

    ;habitat quality objective management
    impact-name = "lc_o"
    [ask patches with [p_landuse_invest = 2 and p_age = 0 and p_invest > 0] [set p_impact-location TRUE]
       print ["creating landclearing oilpalm impact map"]]
    impact-name = "lc_r"
    [ask patches with [p_landuse_invest = 3 and p_age = 0 and p_invest > 0] [set p_impact-location TRUE]
       print ["creating landclearing rubber impact map"]]
    impact-name = "tinput_o"
      [ask patches with [p_landuse_invest = 2 and p_tinput > 0] [set p_impact-location TRUE]
       print ["creating technical input oilpalm impact map"]]
    impact-name = "tinput_r"
      [ask patches with [p_landuse_invest = 3 and p_tinput > 0] [set p_impact-location TRUE]
       print ["creating technical input rubber impact map"]]
    impact-name = "labor_o"
      [ask patches with [p_landuse_invest = 2 and p_labor > 0] [set p_impact-location TRUE]
       print ["creating labor input oilpalm impact map"]]
    impact-name = "labor_r"
      [ask patches with [p_landuse_invest = 3 and p_labor > 0] [set p_impact-location TRUE]
       print ["creating labor input rubber impact map"]]

;    impact-name = "village"
;    [ask patches with [p_landuse_invest = 1] [set p_impact-location TRUE]
;    ;[if ([p_impact-value] of patches = 1) [set [p_impact] of patches = TRUE]
;     print ["creating village impact map"]]
  )
  let new-raster gis:create-raster (max-pxcor + 1) (max-pycor + 1) gis:world-envelope
  let xcount 0
  let ycount max-pycor
  let ycount-raster 0
  while [ycount >= 0]
  [
    while[xcount <= max-pxcor]
    [
      ;show [p_landuse] of patch xcount ycount = threat-value
      ;if ([p_landuse_invest] of patch xcount ycount = threat-value) [print threat-name]
      ifelse ([p_impact-location] of patch xcount ycount = TRUE)
          [gis:set-raster-value new-raster xcount ycount-raster 1]
          [gis:set-raster-value new-raster xcount ycount-raster 0]
      set xcount xcount + 1
    ]
    set xcount 0
    set ycount ycount - 1
    set ycount-raster ycount-raster + 1
  ]

  ;; store impact-map
  let filename (word workdir "/output/" (word (impact-name)) "_c.asc")
  if (file-exists? filename) [file-delete filename]
  gis:store-dataset new-raster filename

  ask patches [set p_impact-location FALSE]
end


;; Conversion of asc-maps to tif-maps for transferation to InVEST
to natcap_invest_convert_maps_tif [workdir]
  print ["convert maps"]
  foreach ["/output/lulc" "/output/village_c" "/output/lc_r_c" "/output/lc_o_c" "/output/tinput_r_c" "/output/tinput_o_c" "/output/labor_r_c" "/output/labor_o_c"]
  [
    [x] ->
    natcap_invest_convert_to_tif (word workdir x)
  ]
end


to natcap_invest_convert_to_tif [filepath]
  py:set "filepath" filepath
  (py:run
    "drv = gdal.GetDriverByName('GTiff')"
    "ds_in = gdal.Open(f'{filepath}.asc')"
    "ds_out = drv.CreateCopy(f'{filepath}.tif', ds_in)"
    "srs = osr.SpatialReference()"
    "srs.ImportFromEPSG(32748)"
    "ds_out.SetProjection(srs.ExportToWkt())"
    "ds_out.GetRasterBand(1).SetNoDataValue(-9999)"
    "ds_in = None"
    "ds_out = None"
  )
end


;; Invoke model InVEST and transfer output
to natcap_invest_execute_invest [workdir experiment]
  print (word "invoke model InVEST with working directory: " workdir)
  print (word "experiment name: " experiment)
  py:set "working_directory" workdir
  py:set "experiment_name" experiment
  (py:run
    "print('setting up parameters')"

    "args = {"
    "'half_saturation_constant': '0.05',"
    "'results_suffix': experiment,"
    "'workspace_dir': workdir,"
    "'lulc_cur_path': os.path.join(workdir, 'lulc.tif'),"
    "'sensitivity_table_path': os.path.join(workdir, 'sensitivity_table.csv'),"
    "'threat_raster_folder': workdir,"
    "'threats_table_path': os.path.join(workdir, 'impact_table.csv'),"
    "}"
    "habitat_quality.execute(args)"
  )
end


;; Convertion of tif-file from InVEST to asc-file for netlogo
to natcap_invest_convert_maps_asc [workdir experiment]
  print (word "converting invest results to asc for " experiment)
  py:set "working_directory" workdir
  (py:run
    "filename = f'{workdir}/output/quality_c_{experiment}'"
    "in_name = f'{filename}.tif'"
    "out_name = f'{filename}.asc'"
    "gdal.Translate(out_name, in_name,format='AAIGrid')"
  )
end



;; save habitat quality of every parcel as patch-variable
to natcap_invest_save_habitatquality_to_patch [workdir experiment]
  print (word "saving habitat quality patch variable to: " workdir)
  let quality-outputfile-name ""

  set quality-outputfile-name (word workdir "/output/quality_c_" experiment ".asc")


  let qualitydata gis:load-dataset quality-outputfile-name ; adjust filename depending on outputfile from invest or dummy-invest
  gis:apply-raster qualitydata p_habitat_quality
end

to natcap_invest_aggregate_habitatquality
  print ["aggregating habitat quality scores"]
  set landscape-hq 0
  set landscape-hq mean [p_habitat_quality] of patches
end
