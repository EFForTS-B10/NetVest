extensions [ py gis]

to setup-invest ; setup the connection to python and import a few libraries
  ;notice that home folder has to be set manually. Is there a way around that?
  print["setting up invest"]
  ;py:python
  ;py:setup "/home/cloud/anaconda3/envs/forge/bin/python"     ;anaconda environment
  py:setup "/home/cloud/pythonenvironment/bin/python" ;pip environment
  py:run "import sys"
  py:run "import os"
  py:run "import natcap.invest"
  py:run "from natcap.invest import habitat_quality"
  py:run "from osgeo import gdal, osr"
end



to get-sys-info ; Here we use the `sys` package in python to output some system info
  output-print (word "Python directory: " (py:runresult "sys.prefix"))
  output-print (word "Platform: " (py:runresult "sys.platform"))
  (py:run
    "print(os.getcwd())"
  )
  
  let home-dir py:runresult "os.environ['HOME']"
  output-print (word "Current home directory is: " home-dir)
  
  output-print ""
end


to prepare-and-run-invest
  translate-to-lulc-invest
  write-maps
  convert-maps
  run-invest
  convert-habitat-quality-to-asc
  save-habitat-quality-to-patch
end


to translate-to-lulc-invest
  print["translating map"]
  ; we create a new variable because p_landuse ist still needed for the simulation
  ask patches 
  [
    if (p_landuse = -100) [set p_landuse_invest 4] ;forest
    if (p_landuse = 1) [set p_landuse_invest 3] ;rubber
    if (p_landuse = 0) [set p_landuse_invest 2] ;oilplam
    if (p_road = 1 and p_landuse = 4) [set p_landuse_invest 1] ;village
  ]
end



to write-maps
  print["writing maps to disk"]
 ; here we want create a different patch variable from landuse and call   adjust-lulc-invest  to populate it
  write-lulc-map-simple
  
  
  write-dummy-sensitivity
  write-dummy-threats

  
  write-threat-map "rubber"
  write-threat-map "oil_palm"
end




to write-lulc-map-simple
  let new-raster gis:patch-dataset p_landuse_invest
  let filename (word "output/lulc.asc")
  if (file-exists? filename) [file-delete filename]
  gis:store-dataset new-raster filename
end


to write-lulc-map-complicated
  ; Write landuse map
  let new-raster gis:create-raster (max-pxcor + 1) (max-pycor + 1) gis:world-envelope
  let xcount 0
  let ycount max-pycor
  let ycount-raster 0
  while [ycount >= 0]
  [
    while[xcount <= max-pxcor]
    [
      gis:set-raster-value new-raster xcount ycount-raster [p_landuse_invest] of patch xcount ycount
      set xcount xcount + 1
    ]
    set xcount 0
    set ycount ycount - 1
    set ycount-raster ycount-raster + 1
  ]

  let filename (word "output/lulc.asc")
  if (file-exists? filename) [file-delete filename]
  gis:store-dataset new-raster filename
end

to write-threat-map [threat-name]
  ; Write threat maps
  let threat-value 0
  print["writing threat map"]
  show threat-name
  ifelse threat-name = "rubber"
    [set threat-value 3
      print ["creating rubber threat map"]]
  [if threat-name = "oil_palm"
      [set threat-value 2
    print ["creating oil palm threat map"]]
  ]
  let new-raster gis:create-raster (max-pxcor + 1) (max-pycor + 1) gis:world-envelope
  let xcount 0
  let ycount max-pycor
  let ycount-raster 0
  while [ycount >= 0]
  [
    while[xcount <= max-pxcor]
    [
      ;show [p_landuse] of patch xcount ycount = threat-value
      ;if ([p_landuse_invest] of patch xcount ycount = threat-value) [print threat-name]
      ifelse ([p_landuse_invest] of patch xcount ycount = threat-value)
          [gis:set-raster-value new-raster xcount ycount-raster 1]
          [gis:set-raster-value new-raster xcount ycount-raster 0]
;

      set xcount xcount + 1
    ]
    set xcount 0
    set ycount ycount - 1
    set ycount-raster ycount-raster + 1
  ]

  let filename (word "output/" (word (threat-name)) "_c.asc")
  if (file-exists? filename) [file-delete filename]
  gis:store-dataset new-raster filename
end


to write-dummy-sensitivity
  (py:run
    "csv_path = 'output/sensitivity_table.csv'"
    "with open(csv_path, 'w') as open_table:"
    "  open_table.write('LULC,NAME,HABITAT,L_oil_palm,L_rubber\\n')"
    "  open_table.write('1,village,0,0,0\\n')"
    "  open_table.write('2,oil_palm,0,0,0\\n')"
    "  open_table.write('3,rubber,0,0,0\\n')"
    "  open_table.write('4,forest,1,0.5,0.5\\n')"
  )
end



to write-dummy-threats
  (py:run
    "csv_path = 'output/threats_samp.csv'"
    "with open(csv_path, 'w') as open_table:"
    "  open_table.write("
    " 'THREAT,MAX_DIST,WEIGHT,DECAY\\n'"
  ")"
    "  open_table.write('oil_palm,1.0,0.5,exponential\\n')"
    "  open_table.write('rubber,1.0,1.0,exponential\\n')"
  )
end


to convert-maps
  foreach ["rubber_c" "oil_palm_c" "lulc"]
  [
    [x] ->
    convert_to_tif x
  ]
end


to convert_to_tif [filename]
  py:set "filename" filename
  (py:run
    "drv = gdal.GetDriverByName('GTiff')"
    "ds_in = gdal.Open(f'output/{filename}.asc')"
    "ds_out = drv.CreateCopy(f'output/{filename}.tif', ds_in)"
    "srs = osr.SpatialReference()"
    "srs.ImportFromEPSG(32748)"
    "ds_out.SetProjection(srs.ExportToWkt())"
    "ds_out.GetRasterBand(1).SetNoDataValue(-9999)"
    "ds_in = None"
    "ds_out = None"
  )
end



to run-invest
  (py:run
    "print('setting up parameters')"
    "working_directory = 'output'"
    "args = {"
    "'half_saturation_constant': '0.5',"
    "'results_suffix': 'test',"
    "'workspace_dir': working_directory,"
    "'lulc_cur_path': os.path.join(working_directory, 'lulc.tif'),"
    "'sensitivity_table_path': os.path.join(working_directory, 'sensitivity_table.csv'),"
    "'threat_raster_folder': working_directory,"
    "'threats_table_path': os.path.join(working_directory, 'threats_samp.csv'),"
    "}"
    "habitat_quality.execute(args)"
  )
end

to convert-habitat-quality-to-asc
  print["converting invest results to asc"]
  (py:run
    "filename = 'output/output/quality_c_test'"
    "in_name = f'{filename}.tif'"
    "out_name = f'{filename}.asc'"
    "gdal.Translate(out_name, in_name,format='AAIGrid')"
  )
end


to save-habitat-quality-to-patch
  print["saving habitat quality patch variable"]
  let qualitydata gis:load-dataset "output/output/quality_c_test.asc"
  gis:apply-raster qualitydata p_habitat_quality
end
